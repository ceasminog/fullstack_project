{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { todoReducer } from './todo';\n\nconst logger = store => next => action => {\n  let result;\n  console.groupCollapsed(\"dispatching\", action.type);\n  console.log('prev state', store.getState());\n  console.log('action', action);\n  result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nconst saver = store => next => action => {\n  let result = next(action);\n  localStorage['mipt-web'] = JSON.stringify(store.getState());\n  return result;\n};\n\nconst initStorage = (initialState = {}) => {\n  return initialState = localStorage['mipt-web'] ? JSON.parse(localStorage['mipt-web']) : initialState;\n};\n\nexport const storeFactory = (initialState = {}) => applyMiddleware(logger, saver)(createStore)(combineReducers({\n  todo: todoReducer\n}), initStorage(initialState));","map":{"version":3,"sources":["/home/piscenco/fullStack/mipt-fs-2019/src/reducers/index.jsx"],"names":["createStore","combineReducers","applyMiddleware","todoReducer","logger","store","next","action","result","console","groupCollapsed","type","log","getState","groupEnd","saver","localStorage","JSON","stringify","initStorage","initialState","parse","storeFactory","todo"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACzC,MAAIC,MAAJ;AACAC,EAAAA,OAAO,CAACC,cAAR,CAAuB,aAAvB,EAAsCH,MAAM,CAACI,IAA7C;AACAF,EAAAA,OAAO,CAACG,GAAR,CAAY,YAAZ,EAA0BP,KAAK,CAACQ,QAAN,EAA1B;AACAJ,EAAAA,OAAO,CAACG,GAAR,CAAY,QAAZ,EAAsBL,MAAtB;AACAC,EAAAA,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAb;AACAE,EAAAA,OAAO,CAACG,GAAR,CAAY,YAAZ,EAA0BP,KAAK,CAACQ,QAAN,EAA1B;AACAJ,EAAAA,OAAO,CAACK,QAAR;AACA,SAAON,MAAP;AACA,CATD;;AAWA,MAAMO,KAAK,GAAGV,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AACxC,MAAIC,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAjB;AACAS,EAAAA,YAAY,CAAC,UAAD,CAAZ,GAA2BC,IAAI,CAACC,SAAL,CAAeb,KAAK,CAACQ,QAAN,EAAf,CAA3B;AACA,SAAOL,MAAP;AACA,CAJD;;AAMA,MAAMW,WAAW,GAAG,CAACC,YAAY,GAAG,EAAhB,KAAuB;AAC1C,SAAOA,YAAY,GAClBJ,YAAY,CAAC,UAAD,CAAZ,GACCC,IAAI,CAACI,KAAL,CAAWL,YAAY,CAAC,UAAD,CAAvB,CADD,GAECI,YAHF;AAIA,CALD;;AAOA,OAAO,MAAME,YAAY,GAAG,CAACF,YAAY,GAAG,EAAhB,KAC3BlB,eAAe,CAACE,MAAD,EAASW,KAAT,CAAf,CAA+Bf,WAA/B,EACCC,eAAe,CAAC;AACfsB,EAAAA,IAAI,EAAEpB;AADS,CAAD,CADhB,EAGKgB,WAAW,CAACC,YAAD,CAHhB,CADM","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { todoReducer } from './todo';\n\nconst logger = store => next => action => {\n\tlet result;\n\tconsole.groupCollapsed(\"dispatching\", action.type);\n\tconsole.log('prev state', store.getState());\n\tconsole.log('action', action);\n\tresult = next(action);\n\tconsole.log('next state', store.getState());\n\tconsole.groupEnd();\n\treturn result;\n};\n\nconst saver = store => next => action => {\n\tlet result = next(action);\n\tlocalStorage['mipt-web'] = JSON.stringify(store.getState());\n\treturn result;\n};\n\nconst initStorage = (initialState = {}) => {\n\treturn initialState =\n\t\tlocalStorage['mipt-web'] ?\n\t\t\tJSON.parse(localStorage['mipt-web']) :\n\t\t\tinitialState;\n};\n\nexport const storeFactory = (initialState = {}) => (\n\tapplyMiddleware(logger, saver)(createStore)(\n\t\tcombineReducers({\n\t\t\ttodo: todoReducer,\n\t\t}), initStorage(initialState)\n\t)\n);"]},"metadata":{},"sourceType":"module"}