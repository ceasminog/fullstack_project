{"ast":null,"code":"var _jsxFileName = \"/home/piscenco/fullStack/mipt-fs-2019/src/views/todo/index.jsx\";\nimport React from 'react';\nimport css from './styles.module.scss';\nimport { TodoItem } from \"../../components/todoItem\";\nimport { TodoListAdder } from \"../../components/todoItemAdder\";\nimport { connect } from \"react-redux\";\nimport { addTodoItem, removeTodoItem } from \"../../actions\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst getData = async () => {\n  //await sleep(3000);\n  return {\n    data: {\n      todoList: [{\n        id: 'wfoiwjefoiwejfoiej',\n        text: 'First item'\n      }]\n    }\n  };\n};\n\nexport class _ToDoList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todoList: [],\n      loading: true\n    };\n\n    this.onRemove = id => {\n      this.setState(prevState => ({\n        todoList: prevState.todoList.filter(item => item.id !== id)\n      }));\n    };\n  }\n\n  async componentDidMount() {\n    let _ref = await getData(),\n        data = _ref.data;\n    /*  this.setState({\n          todoList: data.todoList,\n          loading: false,\n      })*/\n\n  }\n\n  render() {\n    // console.log(this.state);\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"sdfgthyju\")\n    /*\n                <div>\n                    {this.state.loading ?\n                        <div>\n                            <div className={css.ldsFacebook}>\n                                <div/>\n                                <div/>\n                                <div/>\n                            </div>\n                        </div> :\n                        <TransitionGroup className={css.todoList}>\n                            {this.state.todoList.map(item =>\n                                <CSSTransition\n                                    key={item.id}\n                                    timeout={3000}\n                                    classNames={{\n                                        enter: css.listItemEnter,\n                                        enterActive: css.listItemEnterActive,\n                                        exit: css.listItemExit,\n                                        exitActive: css.listItemExitActive,\n                                    }}\n                                >\n                                <TodoItem\n                                    text={item.text}\n                                    onRemove={() => {\n                                        this.onRemove(item.id);\n                                        this.props.removeTodoItem(item.id);\n                                    }}\n                                />\n                                </CSSTransition>\n                            )}\n                            <TodoListAdder\n                                onCreate={item => {\n                                    // this.setState(prevState => ({\n                                    //     todoList: [\n                                    //         ...prevState.todoList,\n                                    //         item\n                                    //     ]\n                                    // }));\n                                    this.props.addTodoItem2(item);\n                                }}\n                            />\n                        </TransitionGroup>}\n                </div>*/\n    ;\n  }\n\n}\nexport const ToDoList = connect(store => ({\n  todo: store.todo\n}), dispatch => ({\n  addTodoItem2(item) {\n    dispatch(addTodoItem(item));\n  },\n\n  removeTodoItem(id) {\n    dispatch(removeTodoItem(id));\n  }\n\n}))(_ToDoList);","map":{"version":3,"sources":["/home/piscenco/fullStack/mipt-fs-2019/src/views/todo/index.jsx"],"names":["React","css","TodoItem","TodoListAdder","connect","addTodoItem","removeTodoItem","CSSTransition","TransitionGroup","sleep","ms","Promise","resolve","setTimeout","getData","data","todoList","id","text","_ToDoList","Component","state","loading","onRemove","setState","prevState","filter","item","componentDidMount","render","ToDoList","store","todo","dispatch","addTodoItem2"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAAQC,QAAR,QAAuB,2BAAvB;AACA,SAAQC,aAAR,QAA4B,gCAA5B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,EAAqBC,cAArB,QAA0C,eAA1C;AACA,SACIC,aADJ,EAEIC,eAFJ,QAGO,wBAHP;;AAKA,MAAMC,KAAK,GAAIC,EAAD,IACV,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CADJ;;AAGA,MAAMI,OAAO,GAAG,YAAY;AACxB;AACA,SAAO;AACHC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,EAAE,EAAE,oBADR;AAEIC,QAAAA,IAAI,EAAE;AAFV,OADM;AADR;AADH,GAAP;AAUH,CAZD;;AAcA,OAAO,MAAMC,SAAN,SAAwBnB,KAAK,CAACoB,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAC3CC,KAD2C,GACnC;AACJL,MAAAA,QAAQ,EAAE,EADN;AAEJM,MAAAA,OAAO,EAAE;AAFL,KADmC;;AAAA,SAc3CC,QAd2C,GAc/BN,EAAD,IAAQ;AACf,WAAKO,QAAL,CAAcC,SAAS,KAAK;AACxBT,QAAAA,QAAQ,EAAES,SAAS,CAACT,QAAV,CAAmBU,MAAnB,CAA0BC,IAAI,IAAIA,IAAI,CAACV,EAAL,KAAYA,EAA9C;AADc,OAAL,CAAvB;AAGH,KAlB0C;AAAA;;AAM3C,QAAMW,iBAAN,GAA0B;AAAA,eACR,MAAMd,OAAO,EADL;AAAA,QACjBC,IADiB,QACjBA,IADiB;AAExB;;;;;AAID;;AAQDc,EAAAA,MAAM,GAAG;AACL;AACA,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADQ;AA8CH;;AApE0C;AAuE/C,OAAO,MAAMC,QAAQ,GAAG1B,OAAO,CAC3B2B,KAAK,KAAK;AACNC,EAAAA,IAAI,EAAED,KAAK,CAACC;AADN,CAAL,CADsB,EAI3BC,QAAQ,KAAK;AACTC,EAAAA,YAAY,CAACP,IAAD,EAAO;AACfM,IAAAA,QAAQ,CAAC5B,WAAW,CAACsB,IAAD,CAAZ,CAAR;AACH,GAHQ;;AAITrB,EAAAA,cAAc,CAACW,EAAD,EAAK;AACfgB,IAAAA,QAAQ,CAAC3B,cAAc,CAACW,EAAD,CAAf,CAAR;AACH;;AANQ,CAAL,CAJmB,CAAP,CAYtBE,SAZsB,CAAjB","sourcesContent":["import React from 'react';\nimport css from './styles.module.scss';\nimport {TodoItem} from \"../../components/todoItem\";\nimport {TodoListAdder} from \"../../components/todoItemAdder\";\nimport {connect} from \"react-redux\";\nimport {addTodoItem, removeTodoItem} from \"../../actions\";\nimport {\n    CSSTransition,\n    TransitionGroup,\n} from 'react-transition-group';\n\nconst sleep = (ms) =>\n    new Promise(resolve => setTimeout(resolve, ms));\n\nconst getData = async () => {\n    //await sleep(3000);\n    return {\n        data: {\n            todoList: [\n                {\n                    id: 'wfoiwjefoiwejfoiej',\n                    text: 'First item',\n                }\n            ]\n        }\n    }\n};\n\nexport class _ToDoList extends React.Component {\n    state = {\n        todoList: [],\n        loading: true,\n    };\n\n    async componentDidMount() {\n       let { data } = await getData();\n      /*  this.setState({\n            todoList: data.todoList,\n            loading: false,\n        })*/\n    }\n\n    onRemove = (id) => {\n        this.setState(prevState => ({\n            todoList: prevState.todoList.filter(item => item.id !== id)\n        }))\n    };\n\n    render() {\n        // console.log(this.state);\n        return (<p>sdfgthyju</p>\n/*\n            <div>\n                {this.state.loading ?\n                    <div>\n                        <div className={css.ldsFacebook}>\n                            <div/>\n                            <div/>\n                            <div/>\n                        </div>\n                    </div> :\n                    <TransitionGroup className={css.todoList}>\n                        {this.state.todoList.map(item =>\n                            <CSSTransition\n                                key={item.id}\n                                timeout={3000}\n                                classNames={{\n                                    enter: css.listItemEnter,\n                                    enterActive: css.listItemEnterActive,\n                                    exit: css.listItemExit,\n                                    exitActive: css.listItemExitActive,\n                                }}\n                            >\n                            <TodoItem\n                                text={item.text}\n                                onRemove={() => {\n                                    this.onRemove(item.id);\n                                    this.props.removeTodoItem(item.id);\n                                }}\n                            />\n                            </CSSTransition>\n                        )}\n                        <TodoListAdder\n                            onCreate={item => {\n                                // this.setState(prevState => ({\n                                //     todoList: [\n                                //         ...prevState.todoList,\n                                //         item\n                                //     ]\n                                // }));\n                                this.props.addTodoItem2(item);\n                            }}\n                        />\n                    </TransitionGroup>}\n            </div>*/\n        )\n    }\n}\n\nexport const ToDoList = connect(\n    store => ({\n        todo: store.todo,\n    }),\n    dispatch => ({\n        addTodoItem2(item) {\n            dispatch(addTodoItem(item));\n        },\n        removeTodoItem(id) {\n            dispatch(removeTodoItem(id));\n        }\n    })\n)(_ToDoList);\n"]},"metadata":{},"sourceType":"module"}